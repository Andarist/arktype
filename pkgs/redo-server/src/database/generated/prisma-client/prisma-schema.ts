// Code generated by Prisma (prisma@1.34.1). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateBrowserEvent {
  count: Int!
}

type AggregateSession {
  count: Int!
}

type AggregateTest {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type BrowserEvent {
  type: String!
  selector: String
  value: String
}

type BrowserEventConnection {
  pageInfo: PageInfo!
  edges: [BrowserEventEdge]!
  aggregate: AggregateBrowserEvent!
}

input BrowserEventCreateInput {
  type: String!
  selector: String
  value: String
}

input BrowserEventCreateManyInput {
  create: [BrowserEventCreateInput!]
}

type BrowserEventEdge {
  node: BrowserEvent!
  cursor: String!
}

enum BrowserEventOrderByInput {
  type_ASC
  type_DESC
  selector_ASC
  selector_DESC
  value_ASC
  value_DESC
}

type BrowserEventPreviousValues {
  type: String!
  selector: String
  value: String
}

type BrowserEventSubscriptionPayload {
  mutation: MutationType!
  node: BrowserEvent
  updatedFields: [String!]
  previousValues: BrowserEventPreviousValues
}

input BrowserEventSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BrowserEventWhereInput
  AND: [BrowserEventSubscriptionWhereInput!]
  OR: [BrowserEventSubscriptionWhereInput!]
  NOT: [BrowserEventSubscriptionWhereInput!]
}

input BrowserEventUpdateManyMutationInput {
  type: String
  selector: String
  value: String
}

input BrowserEventWhereInput {
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  selector: String
  selector_not: String
  selector_in: [String!]
  selector_not_in: [String!]
  selector_lt: String
  selector_lte: String
  selector_gt: String
  selector_gte: String
  selector_contains: String
  selector_not_contains: String
  selector_starts_with: String
  selector_not_starts_with: String
  selector_ends_with: String
  selector_not_ends_with: String
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  AND: [BrowserEventWhereInput!]
  OR: [BrowserEventWhereInput!]
  NOT: [BrowserEventWhereInput!]
}

scalar Long

type Mutation {
  createBrowserEvent(data: BrowserEventCreateInput!): BrowserEvent!
  updateManyBrowserEvents(data: BrowserEventUpdateManyMutationInput!, where: BrowserEventWhereInput): BatchPayload!
  deleteManyBrowserEvents(where: BrowserEventWhereInput): BatchPayload!
  createSession(data: SessionCreateInput!): Session!
  updateManySessions(data: SessionUpdateManyMutationInput!, where: SessionWhereInput): BatchPayload!
  deleteManySessions(where: SessionWhereInput): BatchPayload!
  createTest(data: TestCreateInput!): Test!
  updateManyTests(data: TestUpdateManyMutationInput!, where: TestWhereInput): BatchPayload!
  deleteManyTests(where: TestWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  browserEvents(where: BrowserEventWhereInput, orderBy: BrowserEventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BrowserEvent]!
  browserEventsConnection(where: BrowserEventWhereInput, orderBy: BrowserEventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BrowserEventConnection!
  sessions(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Session]!
  sessionsConnection(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SessionConnection!
  tests(where: TestWhereInput, orderBy: TestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Test]!
  testsConnection(where: TestWhereInput, orderBy: TestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TestConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Session {
  token: String!
  user: User!
}

type SessionConnection {
  pageInfo: PageInfo!
  edges: [SessionEdge]!
  aggregate: AggregateSession!
}

input SessionCreateInput {
  token: String!
  user: UserCreateOneInput!
}

type SessionEdge {
  node: Session!
  cursor: String!
}

enum SessionOrderByInput {
  token_ASC
  token_DESC
}

type SessionPreviousValues {
  token: String!
}

type SessionSubscriptionPayload {
  mutation: MutationType!
  node: Session
  updatedFields: [String!]
  previousValues: SessionPreviousValues
}

input SessionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SessionWhereInput
  AND: [SessionSubscriptionWhereInput!]
  OR: [SessionSubscriptionWhereInput!]
  NOT: [SessionSubscriptionWhereInput!]
}

input SessionUpdateManyMutationInput {
  token: String
}

input SessionWhereInput {
  token: String
  token_not: String
  token_in: [String!]
  token_not_in: [String!]
  token_lt: String
  token_lte: String
  token_gt: String
  token_gte: String
  token_contains: String
  token_not_contains: String
  token_starts_with: String
  token_not_starts_with: String
  token_ends_with: String
  token_not_ends_with: String
  user: UserWhereInput
  AND: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  NOT: [SessionWhereInput!]
}

type Subscription {
  browserEvent(where: BrowserEventSubscriptionWhereInput): BrowserEventSubscriptionPayload
  session(where: SessionSubscriptionWhereInput): SessionSubscriptionPayload
  test(where: TestSubscriptionWhereInput): TestSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Test {
  name: String!
  tags: [String!]!
  steps(where: BrowserEventWhereInput, orderBy: BrowserEventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BrowserEvent!]
}

type TestConnection {
  pageInfo: PageInfo!
  edges: [TestEdge]!
  aggregate: AggregateTest!
}

input TestCreateInput {
  name: String!
  tags: TestCreatetagsInput
  steps: BrowserEventCreateManyInput
}

input TestCreatetagsInput {
  set: [String!]
}

type TestEdge {
  node: Test!
  cursor: String!
}

enum TestOrderByInput {
  name_ASC
  name_DESC
}

type TestPreviousValues {
  name: String!
  tags: [String!]!
}

type TestSubscriptionPayload {
  mutation: MutationType!
  node: Test
  updatedFields: [String!]
  previousValues: TestPreviousValues
}

input TestSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TestWhereInput
  AND: [TestSubscriptionWhereInput!]
  OR: [TestSubscriptionWhereInput!]
  NOT: [TestSubscriptionWhereInput!]
}

input TestUpdateManyMutationInput {
  name: String
  tags: TestUpdatetagsInput
}

input TestUpdatetagsInput {
  set: [String!]
}

input TestWhereInput {
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  steps_every: BrowserEventWhereInput
  steps_some: BrowserEventWhereInput
  steps_none: BrowserEventWhereInput
  AND: [TestWhereInput!]
  OR: [TestWhereInput!]
  NOT: [TestWhereInput!]
}

type User {
  id: ID!
  email: String!
  password: String!
  roles: [String!]!
  firstName: String!
  lastName: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  roles: UserCreaterolesInput
  firstName: String!
  lastName: String!
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreaterolesInput {
  set: [String!]
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  roles: [String!]!
  firstName: String!
  lastName: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  password: String
  roles: UserUpdaterolesInput
  firstName: String
  lastName: String
}

input UserUpdateManyMutationInput {
  email: String
  password: String
  roles: UserUpdaterolesInput
  firstName: String
  lastName: String
}

input UserUpdaterolesInput {
  set: [String!]
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`